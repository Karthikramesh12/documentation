"use strict";(self.webpackChunktrefle_docs=self.webpackChunktrefle_docs||[]).push([[532],{5162:function(e,t,n){n.d(t,{Z:function(){return r}});var i=n(7294),a=n(6010),l="tabItem_Ymn6";function r(e){var t=e.children,n=e.hidden,r=e.className;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,r),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var i=n(7462),a=n(7294),l=n(6010),r=n(2389),s=n(7392),o=n(7094),u=n(2466),p="tabList__CuJ",c="tabItem_LNqP";function d(e){var t,n,r=e.lazy,d=e.block,m=e.defaultValue,h=e.values,b=e.groupId,v=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=h?h:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,s.l)(f,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(t=null!=m?m:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:g[0].props.value;if(null!==y&&!f.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,o.U)(),N=w.tabGroupChoices,T=w.setTabGroupChoices,S=(0,a.useState)(y),E=S[0],x=S[1],G=[],q=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=b){var _=N[b];null!=_&&_!==E&&f.some((function(e){return e.value===_}))&&x(_)}var C=function(e){var t=e.currentTarget,n=G.indexOf(t),i=f[n].value;i!==E&&(q(t),x(i),null!=b&&T(b,String(i)))},Z=function(e){var t,n=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":var i,a=G.indexOf(e.currentTarget)+1;n=null!=(i=G[a])?i:G[0];break;case"ArrowLeft":var l,r=G.indexOf(e.currentTarget)-1;n=null!=(l=G[r])?l:G[G.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},v)},f.map((function(e){var t=e.value,n=e.label,r=e.attributes;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:function(e){return G.push(e)},onKeyDown:Z,onClick:C},r,{className:(0,l.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":E===t})}),null!=n?n:t)}))),r?(0,a.cloneElement)(g.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==E})}))))}function m(e){var t=(0,r.Z)();return a.createElement(d,(0,i.Z)({key:String(t)},e))}},9656:function(e,t,n){n.r(t),n.d(t,{assets:function(){return g},contentTitle:function(){return b},default:function(){return y},frontMatter:function(){return h},metadata:function(){return v},toc:function(){return f}});var i=n(7462),a=n(3366),l=n(7294),r=n(3905),s=n(5488),o=n(5162),u=n(814),p=function(e){var t=[],n=function(e,n){n=null==(n="function"==typeof n?n():n)?"":n,t[t.length]=encodeURIComponent(e)+"="+encodeURIComponent(n)},i=function(e,a){var l,r,s;if(e)if(Array.isArray(a))for(l=0,r=a.length;l<r;l++)i(e+"["+("object"==typeof a[l]&&a[l]?l:"")+"]",a[l]);else if("[object Object]"===Object.prototype.toString.call(a))for(s in a)i(e+"["+s+"]",a[s]);else n(e,a);else if(Array.isArray(a))for(l=0,r=a.length;l<r;l++)n(a[l].name,a[l].value);else for(s in a)i(s,a[s]);return t};return i("",e).join("&")},c=["endpoint","method","query","body"],d=function(e){var t=e.endpoint,n=e.method,i=void 0===n?"GET":n,r=e.query,d=void 0===r?{}:r,m=(e.body,(0,a.Z)(e,c));console.log({endpoint:t,method:i,query:d,props:m});var h=Object.assign({},d,{token:"YOUR_TREFLE_TOKEN"}),b=p(h),v=[{label:"CURL",value:"curl"},{label:"Browser",value:"browser"},{label:"NodeJS",value:"node"},{label:"Python",value:"python"},{label:"Ruby",value:"ruby"}];return l.createElement("div",{className:"codeBlock"},l.createElement(s.Z,{groupId:"supports",defaultValue:"browser",values:v},v.map((function(e){switch(e.value){case"browser":return l.createElement(o.Z,{value:"browser",key:"browser"},"Open your browser and navigate to ",l.createElement("a",{href:"https://trefle.io"+t+"?"+b.toString()},"https://trefle.io"+t+"?"+b.toString()));case"curl":return l.createElement(o.Z,{value:"curl",key:"curl"},l.createElement(u.Z,{className:"bash"},"\ncurl -X "+i.toString().toUpperCase()+' "https://trefle.io'+t+"?"+b.toString()+'"\n          '));case"node":return l.createElement(o.Z,{value:"node",key:"node"},l.createElement(u.Z,{className:"js"},"\nconst fetch = require('node-fetch');\n\n(async () => {\n  const response = await fetch('https://trefle.io"+t+"?"+b.toString()+"');\n  const json = await response.json();\n  console.log(json);\n})();\n          "));case"python":return l.createElement(o.Z,{value:"python",key:"python"},l.createElement(u.Z,{className:"py"},"\nimport requests\n\nr = requests."+i.toString().toLowerCase()+"('https://trefle.io"+t+"?"+b.toString()+"')\nr.json\n"));case"ruby":return l.createElement(o.Z,{value:"ruby",key:"ruby"},l.createElement(u.Z,{className:"rb"},"\nrequire 'httparty'\n\nr = HTTParty."+i.toString().toLowerCase()+"(\n  'https://trefle.io"+t+"',\n  query: "+JSON.stringify(h,null,2).split("\n").join("\n  ")+"\n)\nr.parsed_response\n"));default:return l.createElement(o.Z,{value:"?",key:"?"},l.createElement("span",null,"?"))}}))))},m=["components"],h={id:"snippets",title:"Snippets"},b=void 0,v={unversionedId:"examples/snippets",id:"examples/snippets",title:"Snippets",description:"",source:"@site/docs/examples/snippets.md",sourceDirName:"examples",slug:"/examples/snippets",permalink:"/docs/examples/snippets",draft:!1,editUrl:"https://github.com/treflehq/documentation/edit/master/docs/examples/snippets.md",tags:[],version:"current",lastUpdatedBy:"Andr\xe9 Aubin",lastUpdatedAt:1670748298,formattedLastUpdatedAt:"Dec 11, 2022",frontMatter:{id:"snippets",title:"Snippets"},sidebar:"someSidebar",previous:{title:"Distributions",permalink:"/docs/advanced/distributions"}},g={},f=[{value:"Genus",id:"genus",level:2},{value:"Get all genus",id:"get-all-genus",level:3},{value:"Plants &amp; Species",id:"plants--species",level:2},{value:"Get all plants",id:"get-all-plants",level:3},{value:"Get all species",id:"get-all-species",level:3},{value:"Get only edible plants",id:"get-only-edible-plants",level:3},{value:"Get tallest trees",id:"get-tallest-trees",level:3},{value:"Get plants in Antartica",id:"get-plants-in-antartica",level:3},{value:"Get plants introduced in Marion-Prince Edward",id:"get-plants-introduced-in-marion-prince-edward",level:3},{value:"Get plants native from Tibet",id:"get-plants-native-from-tibet",level:3},{value:"Get species with height between 5cm and 20cm",id:"get-species-with-height-between-5cm-and-20cm",level:3},{value:"Get species with red flowers",id:"get-species-with-red-flowers",level:3},{value:"Get search for coconut species",id:"get-search-for-coconut-species",level:3},{value:"Get species with oldest discoveries first",id:"get-species-with-oldest-discoveries-first",level:3},{value:"Zones &amp; Distributions",id:"zones--distributions",level:2},{value:"Get all countries / zones",id:"get-all-countries--zones",level:3},{value:"Get countries / zones with less than 10 species",id:"get-countries--zones-with-less-than-10-species",level:3}],k={toc:f};function y(e){var t=e.components,n=(0,a.Z)(e,m);return(0,r.kt)("wrapper",(0,i.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Here is some request samples"),(0,r.kt)("admonition",{title:"Third party libraries",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ruby")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"python")," snippets require third-party libraries:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"node"),": ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/node-fetch/node-fetch"},"node-fetch")," library."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"python"),": ",(0,r.kt)("a",{parentName:"li",href:"https://requests.readthedocs.io/en/master/"},"request")," library."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ruby"),": ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/jnunemaker/httparty"},"HTTParty")," library."))),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"genus"},"Genus"),(0,r.kt)("h3",{id:"get-all-genus"},"Get all genus"),(0,r.kt)(d,{endpoint:"/api/v1/genus",mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"plants--species"},"Plants & Species"),(0,r.kt)("admonition",{title:"Reminder",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"In all the following samples, ",(0,r.kt)("inlineCode",{parentName:"strong"},"/plants")," can be switched to ",(0,r.kt)("inlineCode",{parentName:"strong"},"/species")," and ",(0,r.kt)("inlineCode",{parentName:"strong"},"/species")," can be switched to ",(0,r.kt)("inlineCode",{parentName:"strong"},"/plants"),"."),"\nThe only difference is that ",(0,r.kt)("inlineCode",{parentName:"p"},"/species")," API calls will return matching species, subspecies, varieties etc..., and ",(0,r.kt)("inlineCode",{parentName:"p"},"/plants")," API calls will only return main species (without all the children species).")),(0,r.kt)("h3",{id:"get-all-plants"},"Get all plants"),(0,r.kt)(d,{endpoint:"/api/v1/plants",mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-all-species"},"Get all species"),(0,r.kt)(d,{endpoint:"/api/v1/species",mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-only-edible-plants"},"Get only edible plants"),(0,r.kt)(d,{endpoint:"/api/v1/plants",query:{filter_not:{edible_part:"null"}},mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-tallest-trees"},"Get tallest trees"),(0,r.kt)("admonition",{title:"Explanation",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Get all plants"),(0,r.kt)("li",{parentName:"ul"},"With ",(0,r.kt)("strong",{parentName:"li"},"tree")," ligneous type ",(0,r.kt)("inlineCode",{parentName:"li"},"filter[ligneous_type]=tree")),(0,r.kt)("li",{parentName:"ul"},"Without plants with no maximum height ",(0,r.kt)("inlineCode",{parentName:"li"},"filter_not[maximum_height_cm]=null")),(0,r.kt)("li",{parentName:"ul"},"Ordered by maximum height descending (highest first) ",(0,r.kt)("inlineCode",{parentName:"li"},"order[maximum_height_cm]=desc")))),(0,r.kt)(d,{endpoint:"/api/v1/plants",query:{filter_not:{maximum_height_cm:"null"},filter:{ligneous_type:"tree"},order:{maximum_height_cm:"desc"}},mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-plants-in-antartica"},"Get plants in Antartica"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced/distributions"},"Distributions")," to learn more about distributions zones.")),(0,r.kt)(d,{endpoint:"/api/v1/distributions/antarctica/plants",query:{},mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-plants-introduced-in-marion-prince-edward"},"Get plants introduced in Marion-Prince Edward"),(0,r.kt)(d,{endpoint:"/api/v1/distributions/marion-prince-edward/plants",query:{filter:{establishment:"introduced"}},mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-plants-native-from-tibet"},"Get plants native from Tibet"),(0,r.kt)(d,{endpoint:"/api/v1/distributions/tibet/plants",query:{filter:{establishment:"native"}},mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-species-with-height-between-5cm-and-20cm"},"Get species with height between 5cm and 20cm"),(0,r.kt)(d,{endpoint:"/api/v1/species",query:{range:{maximum_height_cm:"5,20"}},mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-species-with-red-flowers"},"Get species with red flowers"),(0,r.kt)(d,{endpoint:"/api/v1/species",query:{filter:{flower_color:"red"}},mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-search-for-coconut-species"},"Get search for coconut species"),(0,r.kt)(d,{endpoint:"/api/v1/species/search",query:{q:"coconut"},mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-species-with-oldest-discoveries-first"},"Get species with oldest discoveries first"),(0,r.kt)(d,{endpoint:"/api/v1/species",query:{order:{year:"asc"}},mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"zones--distributions"},"Zones & Distributions"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced/distributions"},"Distributions")," to learn more about distributions zones.")),(0,r.kt)("h3",{id:"get-all-countries--zones"},"Get all countries / zones"),(0,r.kt)(d,{endpoint:"/api/v1/distributions",mdxType:"MultiLanguageSnippet"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"get-countries--zones-with-less-than-10-species"},"Get countries / zones with less than 10 species"),(0,r.kt)(d,{endpoint:"/api/v1/distributions",query:{range:{species_count:",10"}},mdxType:"MultiLanguageSnippet"}))}y.isMDXComponent=!0}}]);