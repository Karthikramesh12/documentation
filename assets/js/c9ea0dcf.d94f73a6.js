"use strict";(self.webpackChunktrefle_docs=self.webpackChunktrefle_docs||[]).push([[941],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(o,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return l}});var a=n(7294),r=n(6010),i="tabItem_Ymn6";function l(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(7462),r=n(7294),i=n(6010),l=n(2389),s=n(7392),o=n(7094),u=n(2466),c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,n,l=e.lazy,d=e.block,m=e.defaultValue,f=e.values,h=e.groupId,g=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,s.l)(v,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(t=null!=m?m:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,o.U)(),w=N.tabGroupChoices,T=N.setTabGroupChoices,O=(0,r.useState)(y),E=O[0],P=O[1],_=[],A=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var x=w[h];null!=x&&x!==E&&v.some((function(e){return e.value===x}))&&P(x)}var C=function(e){var t=e.currentTarget,n=_.indexOf(t),a=v[n].value;a!==E&&(A(t),P(a),null!=h&&T(h,String(a)))},I=function(e){var t,n=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":var a,r=_.indexOf(e.currentTarget)+1;n=null!=(a=_[r])?a:_[0];break;case"ArrowLeft":var i,l=_.indexOf(e.currentTarget)-1;n=null!=(i=_[l])?i:_[_.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},g)},v.map((function(e){var t=e.value,n=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:function(e){return _.push(e)},onKeyDown:I,onClick:C},l,{className:(0,i.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":E===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(b.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==E})}))))}function m(e){var t=(0,l.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},2103:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=n(5488),s=n(5162),o=["components"],u={id:"getting-started",title:"Getting started"},c=void 0,p={unversionedId:"guides/getting-started",id:"guides/getting-started",title:"Getting started",description:"",source:"@site/docs/guides/getting-started.md",sourceDirName:"guides",slug:"/guides/getting-started",permalink:"/docs/guides/getting-started",draft:!1,editUrl:"https://github.com/treflehq/documentation/edit/master/docs/guides/getting-started.md",tags:[],version:"current",lastUpdatedBy:"Andr\xe9 Aubin",lastUpdatedAt:1670748298,formattedLastUpdatedAt:"Dec 11, 2022",frontMatter:{id:"getting-started",title:"Getting started"},sidebar:"someSidebar",next:{title:"Pagination",permalink:"/docs/guides/pagination"}},d={},m=[{value:"Introduction",id:"introduction",level:3},{value:"What You Need",id:"what-you-need",level:3},{value:"Make your first query",id:"make-your-first-query",level:3},{value:"Rate limiting",id:"rate-limiting",level:3},{value:"The Trefle structure",id:"the-trefle-structure",level:3},{value:"Plant and Species",id:"plant-and-species",level:3}],f={toc:m};function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This is the Trefle API documentation. The Trefle API aims to deliver all plants informations under an accessible interface."),(0,i.kt)("p",null,"All API access is over HTTPS, and accessed from ",(0,i.kt)("a",{parentName:"p",href:"https://trefle.io."},"https://trefle.io.")," All data is sent and received as JSON."),(0,i.kt)("h3",{id:"what-you-need"},"What You Need"),(0,i.kt)("p",null,"In order to make queries, you'll need to create an account and get your personal access token first."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Your access token will allow you to makes queries on the Trefle API. Keep it private.")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create an account on ",(0,i.kt)("a",{parentName:"li",href:"https://trefle.io/users/sign_up"},"trefle.io")),(0,i.kt)("li",{parentName:"ol"},"Confirm your email address"),(0,i.kt)("li",{parentName:"ol"},"Login on your account"),(0,i.kt)("li",{parentName:"ol"},"Grab your ",(0,i.kt)("strong",{parentName:"li"},"Trefle access token"))),(0,i.kt)("h3",{id:"make-your-first-query"},"Make your first query"),(0,i.kt)("p",null,"For the first examples, we will give you the choice between:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Using your web browser"),", which is the simplest, but will be limited when we'll need to code a bit."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Using your terminal"),", with ",(0,i.kt)("inlineCode",{parentName:"li"},"curl")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Using javascipt"),", with NodeJS and the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/node-fetch/node-fetch"},(0,i.kt)("inlineCode",{parentName:"a"},"node-fetch"))," library (install it with ",(0,i.kt)("inlineCode",{parentName:"li"},"yarn add node-fetch"),").")),(0,i.kt)("p",null,"We will first try to list all the plants."),(0,i.kt)(l.Z,{groupId:"supports",defaultValue:"browser",values:[{label:"Browser",value:"browser"},{label:"CURL",value:"curl"},{label:"NodeJS",value:"node"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"browser",mdxType:"TabItem"},(0,i.kt)("p",null,"Open your browser and navigate to"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://trefle.io/api/v1/plants?token=YOUR_TREFLE_TOKEN"},(0,i.kt)("inlineCode",{parentName:"a"},"https://trefle.io/api/v1/plants?token=YOUR_TREFLE_TOKEN")))),(0,i.kt)(s.Z,{value:"curl",mdxType:"TabItem"},(0,i.kt)("p",null,"In your terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl 'https://trefle.io/api/v1/plants?token=YOUR_TREFLE_TOKEN'\n"))),(0,i.kt)(s.Z,{value:"node",mdxType:"TabItem"},(0,i.kt)("p",null,"With the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/node-fetch/node-fetch"},"node-fetch")," library, that will be used in the next examples."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const fetch = require('node-fetch');\n\n(async () => {\n  const response = await fetch('https://trefle.io/api/v1/plants?token=YOUR_TREFLE_TOKEN');\n  const json = await response.json();\n  console.log(json);\n})();\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Or with the native https node library"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const https = require('https');\n\nhttps.get('https://trefle.io/api/v1/plants?token=YOUR_TREFLE_TOKEN', (resp)\n  => {\n  let data = '';\n\n  // A chunk of data has been recieved.\n  resp.on('data', (chunk) => {\n    data += chunk;\n  });\n\n  // The whole response has been received. Print out the result.\n  resp.on('end', () => {\n    console.log(JSON.parse(data));\n  });\n\n}).on(\"error\", (err) => {\n  console.log(\"Error: \" + err.message);\n});\n"))))),(0,i.kt)("p",null,"It return a big JSON response like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "data": [\n        {\n            "author": "Schltr.",\n            "bibliography": "Repert. Spec. Nov. Regni Veg. 16: 358 (1920)",\n            "common_name": null,\n            "family": "Orchidaceae",\n            "family_common_name": null,\n            "genus": "Aa",\n            "genus_id": 14887,\n            "id": 834556,\n            "links": {\n                "genus": "/api/v1/genus/aa",\n                "plant": "/api/v1/plants/aa-achalensis",\n                "self": "/api/v1/species/aa-achalensis"\n            },\n            "plant_id": 423071,\n            "rank": "species",\n            "scientific_name": "Aa achalensis",\n            "slug": "aa-achalensis",\n            "status": "accepted",\n            "synonyms": [],\n            "year": 1920\n        },\n        {\n            "author": "Rchb.f.",\n            "bibliography": "Xenia Orchid. 1: 18 (1854)",\n            "common_name": null,\n            "family": "Orchidaceae",\n            "family_common_name": null,\n            "genus": "Aa",\n            "genus_id": 14887,\n            "id": 834557,\n            "links": {\n                "genus": "/api/v1/genus/aa",\n                "plant": "/api/v1/plants/aa-argyrolepis",\n                "self": "/api/v1/species/aa-argyrolepis"\n            },\n            "plant_id": 423072,\n            "rank": "species",\n            "scientific_name": "Aa argyrolepis",\n            "slug": "aa-argyrolepis",\n            "status": "accepted",\n            "synonyms": [\n                "Altensteinia argyrolepis"\n            ],\n            "year": 1854\n        },  // ... 28 more items\n    ],\n    "links": {\n        "first": "/api/v1/species?page=1",\n        "last": "/api/v1/species?page=20865",\n        "next": "/api/v1/species?page=2",\n        "self": "/api/v1/species"\n    },\n    "meta": {\n        "total": 417293\n    }\n}\n')),(0,i.kt)("h3",{id:"rate-limiting"},"Rate limiting"),(0,i.kt)("p",null,"In order to allow all users to use the API in good conditions, ",(0,i.kt)("strong",{parentName:"p"},"a limit of 120 requests per minute is applied"),". If this limit is a limiting factor for your application (and you have valid reasons), feel free to contact us."),(0,i.kt)("h3",{id:"the-trefle-structure"},"The Trefle structure"),(0,i.kt)("p",null,"Before going further, we need to know a bit how data is organized in the trefle API."),(0,i.kt)("p",null,"The whole API structure is defined by the following classification:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Kingdom\n  -> Subkingdom\n    -> Division\n      -> Division class\n        -> Division order\n          -> Family\n            -> Genus\n              -> Plant\n                -> Species\n")),(0,i.kt)("p",null,"For example, the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Abies_balsamea"},"balsam fir")," hierarchy is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Kingdom -> Plantae \u2013 (Plants)\nSubkingdom -> Tracheobionta \u2013 (Vascular plants)\nDivision -> Coniferophyta \u2013 (Conifers)\nClass -> Pinopsida\nOrder -> Pinales\nFamily -> Pinaceae \u2013 (Pine family)\nGenus -> Abies\nPlant -> Abies balsamea\nSpecies -> Abies balsamea\n")),(0,i.kt)("h3",{id:"plant-and-species"},"Plant and Species"),(0,i.kt)("p",null,"For commodity reasons, we added a ",(0,i.kt)("inlineCode",{parentName:"p"},"Plant")," level between Genus and Species. A plant is the main species of a species, without all the forms, varieties, subspecies etc..."),(0,i.kt)("p",null,'For each plant, we have one main species and several other "sub" species (which can be subspecies, varieties, hybrids, cultivars etc...).'),(0,i.kt)("p",null,"For example, our ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Abies_balsamea"},"balsam fir")," have:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'One species (which is our "plant"): ',(0,i.kt)("inlineCode",{parentName:"li"},"Abies balsamea")),(0,i.kt)("li",{parentName:"ul"},"One sub-species: ",(0,i.kt)("inlineCode",{parentName:"li"},"Abies balsamea ssp. lasiocarpa")),(0,i.kt)("li",{parentName:"ul"},"Two varieties: ",(0,i.kt)("inlineCode",{parentName:"li"},"Abies balsamea var. phanerolepis")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Abies balsamea var. balsamea"))))}h.isMDXComponent=!0}}]);